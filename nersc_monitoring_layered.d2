# note: to render properly, the links have temporarily had the
# '.svg' suffix added
vars: {
    d2-config: {
        layout-engine: tala
        theme-id: 6
    }
}
direction: right
classes: {
    b: {
        style: { 
            border-radius: 6
        }
    }
    hw: {
        shape: rectangle
    }
    sw: {
        shape: page
    }
    db: {
        icon: https://icons.terrastruct.com/essentials%2F117-database.svg
    }
    acc: {
        icon: https://icons.terrastruct.com/essentials%2F050-line%20chart.svg
    }
    dpipe: {
        shape: queue
    }
    k3s: {
        icon: https://raw.githubusercontent.com/kubernetes/kubernetes/refs/heads/master/logo/logo.svg
    }
    vm: {
        shape: package
    }
    exp: {
        shape: parallelogram
    }
    grp: {
        style: { stroke-dash: 2 }
    }
    transp: {
        style: { fill: transparent; stroke: transparent }
    }
    person: {
        icon: https://icons.terrastruct.com/essentials%2F365-user.svg
    }
}

layers: {
    top: {
        grid-rows: 1
        sources: Data Sources {
            class: [b; grp]
            hpe: HPE Systems {
                link: hpe_detail.svg
                class: b
            }
            bldg: Building Systems {
                link: bldg_detail.svg
                class: b
            }
        }
        ex: '' {
            grid-columns: 1
            style.opacity: 0
            apid: API Data Consumer { class: [b; k3s] }
            gw: Gateway { class: [b; k3s] }
        }
        k3sc: Kubernetes clusters {
            class: [b; k3s]
            link: k3sc_detail.svg
            width: 300
            style: { shadow: true }
            txt: |md
            Multiple k3s clusters.  
            One per NERSC group metrics.  
            One per metric class for the  
            environmentals. This is to limit  
            cascading failures.
            | 
        }
        dsa: Datastores & Access {
            class: [b; grp]
            link: dsa_detail.svg
            txt: |md
            **Datastores**: Loki, VictoriaMetrics,  
              ElasticSearch, Alert Manager  
            **Access Points**: Fission, Grafana, Kibana
            | 
        }
        users: Users {
            grid-columns: 1
            class: grp
            big: Operations User { class: person }
            end: End User { class: person }
            rsrch: Researcher { class: person }
        }
        sources.hpe -> ex.apid
        sources.hpe -> ex.gw
        sources.bldg -> ex.gw 
        ex.gw -> k3sc
        k3sc -> dsa
        ex.apid -> dsa
        dsa -> users.big
        dsa -> users.end
    }
    hpe_detail: {
        c: HPE System {
            grid-columns: 1
            kafka: Kafka { class: [b; sw] }
            telem: Telemetry API { class: [b; sw] }
            prom: Prometheus Exporters { class: [b; sw] }
            vma: VMAgent { class: [b; sw] }
            exp: 3rd Party and Custom Exporters { class: [b; sw] }
            kafka -> telem
            prom -> vma
            exp -> vma
        }
        ex: '' {
            grid-columns: 1
            style.opacity: 0
            apid: API Data Consumer { class: [b; k3s] }
            gw: GW { class: [b; k3s] }
        }
        c.telem -> ex.apid
        c.vma -> ex.gw
    }
    k3sc_detail: {
        class: transp
        title: |md
        # Kubernetes Cluster
        VictoriaMetrics ...
        |
        sw: '' {
            grid-columns: 2
            grid-rows: 2
            class: transp
            vma: VMAgent { class: [b; k3s]}
            vmi: VMInsert { class: [b; k3s]}
            vml: VMAlert { class: [b; k3s]}
            vms: VMSelect { class: [b; k3s]}
            vma -> vmi
            vml -> vms
        }
        vmst: VMStore {
            grid-rows: 2
            grid-columns: 4
            style.fill: transparent
            style.stroke: transparent
            b01: ''
            b02: ''
            b03: ''
            b04: ''
            b11: ''
            b12: ''
            b13: ''
            b14: ''
        }
        sw.vmi -> vmst
        vmst -> sw.vms
    }
    bldg_detail: {
        grid-columns: 1
        title: |md
        # Building detail
        |
        content: '' {
            class: transp
            gw: Gateway { 
                class: [b; k3s]
            }
            c: '' {
                grid-columns: 1
                class: transp
                lblnet: LBLnet {
                    grid-columns: 2
                    grid-rows: 3
                    style: { stroke: transparent; fill: "#ff9999" }
                    bacnet: bacnet { class: exp }
                    modbus: modbus substations/UPS { class: exp }
                    ion: ion  { class: exp }
                    bms: B59 BMS { class: [b; hw]}
                    db: B59 DB { class: [b; hw] }
                }
                other: Other exporters {
                    class: grp
                    grid-columns: 1
                    emerson: Emerson PDU  { class: exp }
                    rack: Rack PDU { class: exp }
                    onewire: onewire  { class: exp }
                    modbus: modbus panels { class: exp }
                    ngf: NGF  { class: exp }
                    hpss: HPSS  { class: exp } 
                    isg: ISG { class: exp }
                }
            }
            c.lblnet.bacnet -> gw
            c.lblnet.modbus -> gw
            c.lblnet.ion -> gw
            c.other.emerson -> gw
            c.other.rack -> gw
            c.other.onewire -> gw
            c.other.modbus -> gw
            c.other.ngf -> gw
            c.other.hpss -> gw
            c.other.isg -> gw
        }
    }
    dsa_detail: {
        direction: down
        title: |md
        # Data Stores & Access
        | {
            near: top-center
        }
        # External sources
        apid: API Data Consumer { class: [b; k3s] }
        vml: VMAlert {
            class: [b; k3s ] 
            near: access.dagster
        }
        vms: VMSelect {
            class: [b; k3s] 
        }
        # stores
        stores: Datastores {
            class: grp
            direction: right
            class: grp
            loki: Loki {
                class: [b; sw; db]
            }
            vl: VictoriaLogs {
                class: [b; sw; db]
            }
            es: ElasticSearch {
                class: [b; sw; db]
            }
            am: Alert Manager {
                class: [b; sw; db]
            }
            loki -> am
        }
        access: Access Points {
            class: grp
            fission: Fission (FaaS) {
                class: [b; acc]
            }
            grafana: Grafana {
                class: [b; acc]
            }
            kibana: Kibana {
                class: [b; acc]
            }
            dagster: Dagster: Data pipelines {
                class: { b; dpipe }
                near: users.rsrch
            }
        }
        users: Users {
            class: grp
            rsrch: Researcher { class: person }
            big: Operations User { class: person }
            end: End User { class: person }
        }
        # Connections
        # into stores
        apid -> stores.loki
        apid -> stores.vl
        apid -> stores.es
        # stores -> access points
        stores.es -> access.fission
        stores.es -> access.kibana
        stores.es -> access.grafana
        stores.vl -> access.grafana
        stores.loki -> access.grafana
        stores.loki -> access.dagster
        # into access points
        vms -> access.fission
        vms -> access.grafana
        vml -> access.dagster
        # access points -> users
        access.fission -> users.big
        access.grafana -> users.end
        access.kibana -> users.big
        access.dagster -> users.rsrch
    }
    ap_detail: {
        class: transp
        title: |md
        # OMNI Access Points
        |
    }
}
