#
# This is a layered diagram so generation is best done to
# PDF:
# d2 .\nersc_monitoring.d2 .\nersc_monitoring.pdf
#
vars: {
    d2-config: {
        layout-engine: tala
        # Flagship Terrastruct
        theme-id: 3
    }
}
direction: right
classes: {
    b: {
        style: { 
            border-radius: 6
            fill: "#eeeeff"
        }
    }
    hw: {
        style: { fill: "#999900" }
    }
    sw: {
        style: { fill: "#eeeeee" }
    }
    db: {
        icon: https://icons.terrastruct.com/essentials%2F117-database.svg
    }
    k3s: {
        style: { fill: "#ccffff" }
    }
    vm: {
        style: { fill: "#669999" }
    }
    exp: {
        shape: parallelogram
        style: { fill: "#9999cc" }
    }
    grp: {
        style: { fill: transparent; stroke-dash: 3 }
    }
    transp: {
        style: { fill: transparent; stroke: transparent }
    }
    person: {
        icon: https://icons.terrastruct.com/essentials%2F365-user.svg
    }
}

layers: {
    top: {
        grid-rows: 1
        sources: Data Sources {
            class: [b; grp]
            hpe: HPE Systems {
                link: hpe_detail
                class: b
            }
            bldg: Building Systems {
                link: bldg_detail
                class: b
            }
        }
        ex: '' {
            grid-columns: 1
            style.opacity: 0
            apid: API Data Consumer { class: [b; k3s] }
            gw: Gateway { class: [b; k3s] }
        }
        k3sc: Kubernetes clusters {
            class: b
            link: k3sc_detail
            width: 300
            style: { shadow: true }
            txt: |md
            Multiple k3s clusters.  
            One per NERSC group metrics.  
            One per metric class for the  
            environmentals. This is to limit  
            cascading failures.
            | 
        }
        dsa: Datastores & Access {
            class: [b; grp]
            link: dsa_detail
            txt: |md
            **Datastores**: Loki, VictoriaMetrics,  
              ElasticSearch, Alert Manager  
            **Access Points**: Fission, Grafana, Kibana
            | 
        }
        users: Users {
            grid-columns: 1
            class: grp
            big: Operations User { class: person }
            end: End User { class: person }
        }
        sources.hpe -> ex.apid
        sources.hpe -> ex.gw
        sources.bldg -> ex.gw 
        ex.gw -> k3sc
        k3sc -> dsa
        ex.apid -> dsa
        dsa -> users.big
        dsa -> users.end
    }
    hpe_detail: {
        c: HPE System {
            grid-columns: 1
            kafka: Kafka { class: [b; sw] }
            telem: Telemetry API { class: [b; sw] }
            prom: Prometheus Exporters { class: [b; sw] }
            vma: VMAgent { class: [b; sw] }
            exp: 3rd Party and Custom Exporters { class: [b; sw] }
            kafka -> telem
            prom -> vma
            exp -> vma
        }
        ex: '' {
            grid-columns: 1
            style.opacity: 0
            apid: API Data Consumer { class: [b; k3s] }
            gw: GW { class: [b; k3s] }
        }
        c.telem -> ex.apid
        c.vma -> ex.gw
    }
    k3sc_detail: {
        c: '' {
            grid-columns: 1
            class: transp
            title: |md
            # k3s Cluster Details
            some text here
            |
            sw: '' {
                grid-columns: 2
                grid-rows: 2
                class: transp
                vma: VMAgent { class: [b; k3s ]}
                vmi: VMInsert { class: [b; k3s ]}
                vml: VMAlert { class: [b; k3s ]}
                vms: VMSelect { class: [b; k3s ]}
                vma -> vmi
                vml -> vms
            }
            vmst: VMStore {
                grid-rows: 2
                grid-columns: 4
                style.fill: transparent
                style.stroke: transparent
                b01: ''
                b02: ''
                b03: ''
                b04: ''
                b11: ''
                b12: ''
                b13: ''
                b14: ''
            }
            sw.vmi -> vmst
            vmst -> sw.vms
        }
        home: Back to top {
            link: top
            class: transp
        }
    }
    bldg_detail: {
        grid-columns: 1
        title: |md
        # Building detail
        |
        content: '' {
            class: transp
            gw: Gateway { 
                class: [b; k3s]
            }
            c: '' {
                grid-columns: 1
                class: transp
                lblnet: LBLnet {
                    grid-columns: 2
                    grid-rows: 3
                    style: { stroke: transparent; fill: "#ff9999" }
                    bacnet: bacnet { class: exp }
                    modbus: modbus substations/UPS { class: exp }
                    ion: ion  { class: exp }
                    bms: B59 BMS { class: [b; hw]}
                    db: B59 DB { class: [b; hw] }
                }
                other: Other exporters {
                    class: grp
                    grid-columns: 1
                    emerson: Emerson PDU  { class: exp }
                    rack: Rack PDU { class: exp }
                    onewire: onewire  { class: exp }
                    modbus: modbus panels { class: exp }
                    ngf: NGF  { class: exp }
                    hpss: HPSS  { class: exp } 
                    isg: ISG { class: exp }
                }
            }
            c.lblnet.bacnet -> gw
            c.lblnet.modbus -> gw
            c.lblnet.ion -> gw
            c.other.emerson -> gw
            c.other.rack -> gw
            c.other.onewire -> gw
            c.other.modbus -> gw
            c.other.ngf -> gw
            c.other.hpss -> gw
            c.other.isg -> gw
        }
        home: Back to top {
            link: top
            class: transp
        }
    }
    sinks_detail: {
        grid-columns: 1
        class: transp
        title: |md
        # Data Sinks
        |
        content: '' {
            grid-columns: 2
            class: transp
            src: '' {
                grid-columns: 1
                class: transp
                apid: API Data Consumer { class: [b; k3s] }
                vml: VMAlert { class: [b; k3s ]}
            }
            tgt: '' {
                grid-columns: 1
                class: grp
                loki: Loki {
                    class: [b; sw; db]
                }
                vl: VictoriaLogs {
                    class: [b; sw; db]
                }
                es: ElasticSearch {
                    class: [b; sw; db]
                }
                am: Alert Manager {
                    class: [b; sw; db]
                }
                loki -> am
            }
            src.apid -> tgt.loki
            src.apid -> tgt.vl
            src.apid -> tgt.es
            src.vml -> tgt.am
        }
    }
    ap_detail: {
        class: transp
        title: |md
        # OMNI Access Points
        |
    }
}
# Original diagram data 
# d: '' {
#     grid-rows: 1
#     hw: Hardware {
#         grid-columns: 1
#         class: transpdash
#         bms: Building Management System {
#             class: rr
#         }
#         apex: Lighthouse Apex Particle Sensors {
#             class: rr
#         }
#         trendpoint: Trendpoint Power Meters  {
#             class: rr
#         }
#         ion: ION Substation Meters  {
#             class: rr
#         }
#         otemp: Onewire Temperature Sensors {
#             class: rr
#         }
#         spin: ISG SPIN {
#             icon: https://icons.terrastruct.com/tech%2Fservers.svg
#             exp: Exporters {
#                 shape: step
#                 text: |md
#                 * Vmoperator
#                 * VMAgent
#                 * other exporters
#                 |
#             }
#         }
#         ngf: NGF {
#             icon: https://icons.terrastruct.com/tech%2Fservers.svg
#             exp: Exporters {
#                 shape: step
#                 text: |md
#                 * Vmoperator
#                 * VMAgent
#                 * other exporters
#                 * DTNs and Global File System
#                 |
#             }
#         }
#         hpss: HPSS {
#             icon: https://icons.terrastruct.com/tech%2Fservers.svg
#             exp: Exporters {
#                 shape: step
#                 text: |md
#                 * Vmoperator
#                 * VMAgent
#                 * other exporters
#                 |
#             }
#         }
#         perlmutter: Perlmutter {
#             grid-columns: 1
#             icon: https://icons.terrastruct.com/tech%2Fservers.svg
#             prom_e: Prometheus endpoints
#             kafka: Kafka {
#                 shape: parallelogram
#             }
#             telem_api: Telemetry API {
#                 shape: parallelogram
#             }
#             kafka -> telem_api
#             exp: Exporters {
#                 shape: step
#                 text: |md
#                 * Vmoperator
#                 * VMAgent
#                 * other exporters
#                 |
#             }
#             ldms: Lightweight Distributed Metric Service {
#               shape: parallelogram
#             }
#             telem_api -> exp
#             ldms -> exp
#         }

#         omni_hw: OMNI Hardware {
#             grid-columns: 1
#             icon: https://icons.terrastruct.com/tech%2Frouter.svg
#             switches: Network Switches {
#                 shape: step
#                 text: |md
#                 * SNMP
#                 |
#             }
#             gigabyte: Gigabyte {
#                 shape: step
#                 text: |md
#                 * Redfish
#                 * IPMI
#                 * SNMP
#                 |
#             }
#             hippos: ASRock {
#                 shape: step
#                 text: |md
#                 * Redfish
#                 * IPMI
#                 * SNMP
#                 |
#             }
#         }
#     }
#     ingest: OMNI Network Gateway {
#         class: transpdash
#         grid-columns: 1
#         device_gateway: '' {
#           class: rr
#           grid-columns: 1
#           bacnet: Bacnet Gateway
#           modbus: Modbus Gateway
#           onewire: Onewire Gateway
#         }
#         isg_ingest: 'ISG Forwarder' {
#           class: rr
#           vmagent-isg: VMAgent
#         }
#         ngf_ingest: 'NGF Forwarder' {
#           class: rr
#           vmagent-ngf: VMAgent
#         }
#         hpss_ingest: 'HPSS Forwarder' {
#           class: rr
#           vmagent-hpss: VMAgent
#         }
#         perlmutter_ingest: 'Perlmutter Forwarder' {
#           class: rr
#           grid-columns: 1
#           logstash: Logstash
#           vmagent-p: VMAgent
#         }
#         redfish_ingest: '' {
#           class: rr
#           grid-columns: 1
#           exp: Redfish Exporter
#         }
#     }
#     middle: '' {
#         class: transpdash
#         hw_mon: '' {
#             bacnet_exporter: BACNET Exporter
#             bacnet_exporter.width: 150
#             modbus_exporter: MODBUS Exporter
#             modbus_exporter.width: 150
#             onewire_exporter: OneWire Exporter
#             onewire_exporter.width: 150
#         }

#         vm_operator: 'VM Operator' {
#             almgr: Alert Manager
#             vmal: VMAlert
#             vmag: VMAgent
#         }

#         vmag: VMAgent {
#             class: rr
#         }
#         service_endpoints: Services {
#             text: |md
#             * Servicenow
#             * Email
#             * Slack
#             |
#         }
#         sfapi:  Superfacilities API {

#         }
#         fusion:  Fusion API {

#         }
#         prom_endpoints: Prometheus endpoints {
#             class: rr
#         }

#     }
#     dbs: Data Sources {
#         grid-columns: 1
#         class: transpdash
#         vmdb: Victoria Metrics DB {
#             shape: image
#             icon: https://icons.terrastruct.com/essentials%2F117-database.svg
#         }

#         es: ElasticSearch {
#             shape: image
#             icon: https://icons.terrastruct.com/essentials%2F117-database.svg
#         }

#         loki: Loki logs {
#             shape: image
#             icon: https://icons.terrastruct.com/essentials%2F117-database.svg
#         }
#         vm-logs: VictoriaMetrics logs {
#             shape: image
#             icon: https://icons.terrastruct.com/essentials%2F117-database.svg
#         }
#         servicenow: ServiceNow (MOTD Events) {
#             shape: image
#             icon: https://icons.terrastruct.com/essentials%2F117-database.svg
#         }
#     }
#     display: Display {
#         grid-columns: 1
#         class: transpdash
#         grafana: Grafana {
#             shape: image
#             icon: https://icons.terrastruct.com/azure%2FGeneral%20Service%20Icons%2FShared%20Dashboard.svg
#         }

#         kibana: Kibana {
#             shape: image
#             icon: https://icons.terrastruct.com/azure%2FGeneral%20Service%20Icons%2FShared%20Dashboard.svg
#         }

#     }
# # Connections

# dbs.vmdb -> display.grafana
# middle.vm_operator.almgr -> middle.service_endpoints
# middle.vm_operator -> dbs.vmdb
# dbs.es -> display.kibana
# hw.perlmutter.kafka -> ingest.perlmutter_ingest.logstash -> dbs.loki
# middle.hw_mon.modbus_exporter -> middle.vm_operator -> dbs.es
# middle.hw_mon.bacnet_exporter -> middle.vm_operator -> dbs.es
# middle.hw_mon.onewire_exporter -> middle.vm_operator -> dbs.es
# hw.omni_hw.switches -> ingest.redfish_ingest.exp
# hw.omni_hw.gigabyte -> ingest.redfish_ingest.exp
# hw.omni_hw.hippos -> ingest.redfish_ingest.exp
# ingest.redfish_ingest.exp -> middle.vm_operator
# hw.bms -> ingest.device_gateway.bacnet
# hw.apex -> ingest.device_gateway.modbus
# hw.ion -> ingest.device_gateway.modbus
# hw.trendpoint -> ingest.device_gateway.modbus
# hw.otemp -> ingest.device_gateway.onewire
# ingest.device_gateway.bacnet -> middle.hw_mon.bacnet_exporter
# ingest.device_gateway.modbus -> middle.hw_mon.modbus_exporter
# ingest.device_gateway.modbus -> middle.hw_mon.modbus_exporter
# ingest.device_gateway.modbus -> middle.hw_mon.modbus_exporter
# ingest.device_gateway.onewire -> middle.hw_mon.onewire_exporter
# hw.perlmutter.exp -> ingest.perlmutter_ingest.vmagent-p
# hw.spin.exp -> ingest.isg_ingest.vmagent-isg
# hw.ngf.exp -> ingest.ngf_ingest.vmagent-ngf
# hw.hpss.exp -> ingest.hpss_ingest.vmagent-hpss
# ingest.perlmutter_ingest.vmagent-p -> dbs.vmdb
# ingest.isg_ingest.vmagent-isg -> dbs.vmdb
# ingest.ngf_ingest.vmagent-ngf -> dbs.vmdb
# ingest.hpss_ingest.vmagent-hpss -> dbs.vmdb
# }
